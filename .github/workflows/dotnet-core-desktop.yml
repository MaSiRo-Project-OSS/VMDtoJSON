# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.

name: .NET Core Desktop

on:
  push:
    branches: [ release/* ]
  pull_request:
    branches: [ release/* ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest

    env:
      Solution_Name: _sample/.NetCore/VMDtoJSON.sln
      Test_Project_Path: _sample/.NetCore/VMDtoJSON_Package/VMDtoJSON.csproj
      Wap_Project_Directory: _sample/.NetCore/VMDtoJSON
      Wap_Project_Path: _sample/.NetCore/VMDtoJSON/WAPPackage.wapproj

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
